---
#
# system configuration section
#
system:
  machine-disabled: &machine-disabled
    enabled: !!bool false
  machine-base: &machine-base
    enabled: !!bool true
    type: l99.driver.fanuc.FanucMachine, fanuc
    strategy: l99.driver.fanuc.strategies.FanucMultiStrategy, fanuc
    handler: l99.driver.fanuc.handlers.FanucOne, fanuc
  default-mqtt-options: &default-mqtt-options
    topic: "fanuc/{{machine.Id}}/{{veneer.Name}}{{if veneer.SliceKey}}/{{veneer.SliceKey}}{{end}}"
  default-influx-transformers: &default-influx-transformers
    transformers:
      SWEEP_END: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}}
        online={{data.online}},
        {{-}}healthy={{data.healthy}}
      l99.driver.fanuc.veneers.FocasPerf, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}}
        sweep_ms={{data.sweep_ms}}
      l99.driver.fanuc.veneers.SysInfo, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}}
        model="{{data.model}}",
        {{-}}cnc_type="{{data.cnc_type}}",
        {{-}}mt_type="{{data.mt_type}}",
        {{-}}series="{{data.series}}",
        {{-}}version="{{data.version}}",
        {{-}}axes={{data.axes}}
      l99.driver.fanuc.veneers.StateData, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}}
        poweron_min={{data.timers.poweron_min}},
        {{-}}operating_min={{data.timers.operating_min}},
        {{-}}cutting_min={{data.timers.cutting_min}},
        {{-}}fovr={{data.override.feed}},
        {{-}}rovr={{data.override.rapid}},
        {{-}}sovr={{data.override.spindle}},
        {{-}}tool={{data.modal.t}}
      l99.driver.fanuc.veneers.ProductionData, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}}
        program_name="{{data.program.name}}",
        {{-}}program_comment="{{data.program.comment}}",
        {{-}}program_modified={{data.program.modified}},
        {{-}}pieces_produced={{data.pieces.produced}},
        {{-}}pieces_produced_life={{data.pieces.produced_life}},
        {{-}}pieces_remaining={{data.pieces.remaining}},
        {{-}}cycle_time={{data.timers.cycle_time_ms}}
      l99.driver.fanuc.veneers.AlarmsSeries, fanuc: >-
        {{-for alarm in data.alarms-}}
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}}
        axis="{{alarm.axis}}",
        {{-}}type="{{alarm.type}}",
        {{-}}number={{alarm.number}},
        {{-}}message="{{alarm.message}}"{{'\n'}}
        {{~end}}
      l99.driver.fanuc.veneers.OpMsgs, fanuc: >-
        {{-for msg in data.messages-}}
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker.number}}
        position={{msg.position}},
        {{-}}number={{msg.number}},
        {{-}}message="{{msg.message}}"{{'\n'}}
        {{~end}}
      l99.driver.fanuc.veneers.AxisData, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}},
        {{-}}axis={{observation.marker[1].name}}
        position_machine={{data.position.machine}},
        {{-}}position_absolute={{data.position.absolute}},
        {{-}}feed={{data.feed}},
        {{-}}motion={{data.motion}},
        {{-}}servo_temp={{data.servo_temp}},
        {{-}}coder_temp={{data.coder_temp}},
        {{-}}load={{data.load}},
        {{-}}power={{data.power}},
        {{-}}alarm_overtravel={{data.alarms.overtravel}},
        {{-}}alarm_overheat={{data.alarms.overheat}},
        {{-}}alarm_servo={{data.alarms.servo}}
      l99.driver.fanuc.veneers.SpindleData, fanuc: >-
        {{observation.name}},
        {{-}}machine={{observation.machine}},
        {{-}}path={{observation.marker[0].number}},
        {{-}}spindle={{observation.marker[1].name}}
        speed={{data.speed}},
        {{-}}load={{data.load}},
        {{-}}temperature={{data.temperature}},
        {{-}}power={{data.power}}
  default-shdr-model-genny: &default-shdr-model-genny
    generator:
      enabled: !!bool true 
      output: "device_{{device}}.xml"
      root: |-
        <Device id="{{device}}" name="{{device}}" uuid="xxx">
          <Description manufacturer="xxx" serialNumber="xxx">xxx</Description>
          <DataItems>
            <DataItem category="EVENT" discrete="true" id="{{device}}_asset_changed" type="ASSET_CHANGED"/>
            <DataItem category="EVENT" id="{{device}}_asset_removed" type="ASSET_REMOVED"/>
            <DataItem category="EVENT" id="{{device}}_availability" type="AVAILABILITY"/>
            <DataItem category="EVENT" id="{{device}}_adapter_ip" type="NETWORK" subType="IPV4_ADDRESS"/>
            <DataItem category="EVENT" id="{{device}}_adapter_port" type="NETWORK" subType="x:PORT"/>
            <DataItem category="CONDITION" id="{{device}}_adapter_health" type="CONNECTION_STATUS"/>
          </DataItems>
          <Components>
            <Axes id="{{device}}_axes">
              <Components>
              {{-
                for path in paths; 
                  for axis in axes[path];
                    axis_letter = string.slice axis 0 1;
                    is_rotary = array.contains [`A`,`B`,`C`] axis_letter;
                    if is_rotary;
                      '\n'
                      GenerateAxis generator['axis']['rotary'] path axis;
                      '\n'
                    else;
                      '\n'
                      GenerateAxis generator['axis']['linear'] path axis;
                      '\n'
                    end;
                  end;
                  for spindle in spindles[path];
                    '\n'
                    GenerateSpindle generator['axis']['spindle'] path spindle;
                    '\n'
                  end;
                end;
              -}}
              </Components>
            </Axes>
            <Controller id="{{device}}_controller">
              <DataItems>
                <DataItem category="EVENT" id="{{device}}_estop" type="EMERGENCY_STOP"/>
                <DataItem category="EVENT" id="{{device}}_machine_ip" type="NETWORK" subType="IPV4_ADDRESS"/>
                <DataItem category="EVENT" id="{{device}}_machine_port" type="NETWORK" subType="x:PORT"/>
              </DataItems>
              <Components>
              {{-
                for path in paths; 
                  '\n'
                  GeneratePath generator['controller']['path'] path; 
                  '\n'
                end;
              -}}
              </Components>
            </Controller>
          </Components>
        </Device>
      controller:
        path: |-
          <Path id="{{device}}_p{{path}}">
            <DataItems>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_comms" type="COMMUNICATIONS"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_logic" type="LOGIC_PROGRAM"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_motion" type="MOTION_PROGRAM"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_system" type="SYSTEM"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_spindles" type="SYSTEM"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_alm_axes" type="SYSTEM"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_alarm" type="x:MESSAGE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_message" type="x:MESSAGE"/>
              <!-- SYSTEM -->
              <DataItem category="EVENT" id="{{device}}_p{{path}}_hwver" type="HARDWARE" subType="VERSION"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_axes" type="ACTIVE_AXES"/>
              <!-- STAT -->
              <DataItem category="EVENT" id="{{device}}_p{{path}}_ctl_mode" type="CONTROLLER_MODE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_ctl_exec" type="EXECUTION"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_tmr_powered" type="EQUIPMENT_TIMER" subType="POWERED"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_tmr_operating" type="EQUIPMENT_TIMER" subType="OPERATING"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_tmr_loaded" type="EQUIPMENT_TIMER" subType="LOADED"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_tool_num" type="TOOL_NUMBER"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_tool_grp" type="TOOL_GROUP"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_ovr_feed" subType="PROGRAMMED" type="PATH_FEEDRATE_OVERRIDE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_ovr_rapid" subType="RAPID" type="PATH_FEEDRATE_OVERRIDE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_ovr_spindle" type="ROTARY_VELOCITY_OVERRIDE"/>
              <!-- PRODUCTION -->
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_tmr_cycle" type="PROCESS_TIMER" subType="PROCESS"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_part_count_life" type="PART_COUNT" subType="ALL"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_part_count_complete" type="PART_COUNT" subType="COMPLETE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_part_count_remain" type="PART_COUNT" subType="REMAINING"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_prg_name" type="PROGRAM"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_prg_cmt" type="PROGRAM_COMMENT"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_prg_size" type="x:PROGRAM_SIZE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_prg_mod" type="x:PROGRAM_MODIFIED"/>
              <!-- G -->
              <DataItem category="EVENT" id="{{device}}_p{{path}}_block" type="BLOCK"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_line" type="x:MESSAGE"/>
            </DataItems>
          </Path>
      axis:
        linear: |-
          <Linear id="{{device}}_p{{path}}_{{axis}}">
            <DataItems>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_absolute" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_distance" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_machine" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_relative" type="POSITION" subType="ACTUAL" units="MILLIMETER"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_load" type="LOAD" units="PERCENT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_temp_servo" type="TEMPERATURE" units="CELSIUS" compositionId="{{device}}_p{{path}}_{{axis}}_motor"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_temp_coder" type="TEMPERATURE" units="CELSIUS"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_power" type="WATTAGE" subType="ACTUAL" units="WATT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_feed" type="AXIS_FEEDRATE" units="MILLIMETER/SECOND"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_heat" type="TEMPERATURE"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_travel" type="POSITION"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_servo" type="ACTUATOR"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_{{axis}}_state" type="AXIS_STATE"/>
            </DataItems>
            <Compositions>
              <Composition id="{{device}}_p{{path}}_{{axis}}_motor" type="MOTOR"/>
            </Compositions>
          </Linear>
        rotary: |-
          <Rotary id="{{device}}_p{{path}}_{{axis}}">
            <DataItems>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_absolute" type="POSITION" subType="ACTUAL" units="DEGREE"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_distance" type="POSITION" subType="ACTUAL" units="DEGREE"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_machine" type="POSITION" subType="ACTUAL" units="DEGREE"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_pos_relative" type="POSITION" subType="ACTUAL" units="DEGREE"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_load" type="LOAD" units="PERCENT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_temp_servo" type="TEMPERATURE" units="CELSIUS" compositionId="{{device}}_p{{path}}_{{axis}}_motor"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_temp_coder" type="TEMPERATURE" units="CELSIUS"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_power" type="WATTAGE" subType="ACTUAL" units="WATT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{axis}}_feed" type="ANGULAR_VELOCITY" units="DEGREE/SECOND"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_heat" type="TEMPERATURE"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_travel" type="POSITION"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{axis}}_alm_servo" type="ACTUATOR"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_{{axis}}_state" type="AXIS_STATE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_{{axis}}_rotary" type="ROTARY_MODE"/>
            </DataItems>
            <Compositions>
              <Composition id="{{device}}_p{{path}}_{{axis}}_motor" type="MOTOR"/>
            </Compositions>
          </Rotary>
        spindle: |-
          <Rotary id="{{device}}_p{{path}}_{{spindle}}">
            <DataItems>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{spindle}}_load" type="LOAD" units="PERCENT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{spindle}}_temp" type="TEMPERATURE" units="CELSIUS" compositionId="{{device}}_p{{path}}_{{spindle}}_motor"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{spindle}}_power" type="WATTAGE" subType="ACTUAL" units="WATT"/>
              <DataItem category="SAMPLE" id="{{device}}_p{{path}}_{{spindle}}_speed" type="SPINDLE_SPEED" subType="ACTUAL" units="REVOLUTION/MINUTE"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{spindle}}_alm_lnk" type="COMMUNICATIONS"/>
              <DataItem category="CONDITION" id="{{device}}_p{{path}}_{{spindle}}_alm_amp" type="ACTUATOR"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_{{spindle}}_state" type="AXIS_STATE"/>
              <DataItem category="EVENT" id="{{device}}_p{{path}}_{{spindle}}_rotary" type="ROTARY_MODE"/>
            </DataItems>
            <Compositions>
              <Composition id="{{device}}_p{{path}}_{{spindle}}_motor" type="MOTOR"/>
            </Compositions>
          </Rotary>
  default-shdr-transformers: &default-shdr-transformers
    transformers:
      SWEEP_END: >-
        p = device;
        ShdrEventIf p+`_availability` data.online `AVAILABLE` `UNAVAILABLE`;
        ShdrEvent p+`_adapter_ip` adapter.ipaddress;
        ShdrEvent p+`_adapter_port` adapter.port;
        ShdrEvent p+`_machine_ip` machine.focas_endpoint.ipaddress;
        ShdrEvent p+`_machine_port` machine.focas_endpoint.port;
        ShdrConditionFaultIf p+`_adapter_health` (! data.healthy);
      l99.driver.fanuc.veneers.SysInfo, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        v = array.join [data.mt_type,data.cnc_type,data.series,data.model,data.version] ` `;
        a = array.join (machineAxisNamesForPath observation.marker[0].number) ` `;
        s = array.join (machineSpindleNamesForPath observation.marker[0].number) ` `;
        ShdrEvent p+`_hwver` v;
        ShdrEvent p+`_axes` (array.join [a,s] ` `);
      l99.driver.fanuc.veneers.StateData, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        if observation.marker[0].number == 1; ShdrEventIf device+`_estop` (data.emergency == 1) `TRIGGERED` `ARMED`; end;
        ShdrSample p+`_tmr_powered` (data.timers.poweron_min * 60);
        ShdrSample p+`_tmr_operating` (data.timers.operating_min * 60);
        ShdrSample p+`_tmr_loaded` (data.timers.cutting_min * 60);
        ShdrEvent p+`_ctl_mode` data.mode;
        ShdrEvent p+`_ctl_exec` data.execution;
        ShdrEvent p+`_tool_num` data.modal.t;
        ShdrEvent p+`_ovr_feed` data.override.feed;
        ShdrEvent p+`_ovr_rapid` data.override.rapid;
        ShdrEvent p+`_ovr_spindle` data.override.spindle;
        ## ShdrConditionFaultIf p+`_alm` (data.alarm == 1);
      l99.driver.fanuc.veneers.ToolData, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        ShdrEvent p+`_tool_num` data.tool;
        ShdrEventIf p+`_tool_grp` (data.group > 0) data.group `UNAVAILABLE`;
      l99.driver.fanuc.veneers.ProductionData, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        ShdrSample p+`_tmr_cycle` (data.timers.cycle_time_ms / 1000);
        ShdrEvent p+`_part_count_life` data.pieces.produced_life;
        ShdrEvent p+`_part_count_complete` data.pieces.produced;
        ShdrEvent p+`_part_count_remain` data.pieces.remaining;
        ShdrEvent p+`_prg_name` data.program.name;
        ShdrEvent p+`_prg_cmt` data.program.comment;
        ShdrEvent p+`_prg_size` data.program.size_b;
        ShdrEvent p+`_prg_mod` data.program.modified;
      l99.driver.fanuc.veneers.GCodeBlocks, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        if (array.size data.blocks) == 0
          ShdrEvent p+`_block` `UNAVAILABLE`;
          ShdrEvent p+`_line` `UNAVAILABLE`;
        else
          m = array.map data.blocks `block_text`;
          ShdrEvent p+`_block` data.blocks[0].block_number;
          ShdrEvent p+`_line` (array.join m `;`);
        end;
      l99.driver.fanuc.veneers.AlarmsSeries, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        if (array.size data.alarms) == 0
          ShdrEvent p+`_alarm` `UNAVAILABLE`;
          ShdrConditionNormal p+`_alm_comms`;
          ShdrConditionNormal p+`_alm_logic`;
          ShdrConditionNormal p+`_alm_motion`;
          ShdrConditionNormal p+`_alm_system`;
          ShdrConditionNormal p+`_alm_axes`;
          ShdrConditionNormal p+`_alm_spindles`;
        else
          m = array.map data.alarms `message`;
          ShdrEvent p+`_alarm` (array.join m `;`);
          t = array.uniq (array.map data.alarms `type`);
          f_comms = ((array.contains t `IO`)||(array.contains t `SR`));
          f_logic = ((array.contains t `SW`)||(array.contains t `PC`));
          f_motion = ((array.contains t `PS`)||(array.contains t `MC`)||(array.contains t `BG`));
          f_spindles = (array.contains t `SP`);
          for alm in data.alarms;
            if alm.axis_code == 0 && !array.contains [`IO`,`SR`,`SW`,`PC`,`PS`,`MC`,`BG`] alm.type;
              f_system = true;
            end;
            if alm.axis_code > 0;
              f_axes = true;
            end;
          end;
          ShdrConditionFaultIf p+`_alm_comms` f_comms;
          ShdrConditionFaultIf p+`_alm_logic` f_logic;
          ShdrConditionFaultIf p+`_alm_motion` f_motion;
          ShdrConditionFaultIf p+`_alm_system` f_system;
          ShdrConditionFaultIf p+`_alm_axes` f_axes;
          ShdrConditionFaultIf p+`_alm_spindles` f_spindles;
        end;
        ## (array.size (array.filter (array.map data.alarms `axis_code`) @(do; ret $0 > 0; end)) > 0);
      l99.driver.fanuc.veneers.OpMsgs, fanuc: >-
        p = device+`_p`+observation.marker[0].number;
        if (array.size data.messages) == 0
          ShdrEvent p+`_message` `UNAVAILABLE`;
        else
          m = array.map data.messages `message`;
          ShdrEvent p+`_message` (array.join m `;`);
        end;
      l99.driver.fanuc.veneers.AxisData, fanuc: >-
        p = device+`_p`+observation.marker[0].number+`_`+observation.marker[1].name;
        ShdrSample p+`_pos_absolute` data.position.absolute;
        ShdrSample p+`_pos_distance` data.position.distance;
        ShdrSample p+`_pos_machine` data.position.machine;
        ShdrSample p+`_pos_relative` data.position.relative;
        ShdrSample p+`_load` data.load;
        ShdrSample p+`_temp_servo` data.servo_temp;
        ShdrSample p+`_temp_coder` data.coder_temp;
        ShdrSample p+`_power` data.power;
        ShdrSample p+`_feed` (data.feed*60);
        ShdrEventIf p+`_state` data.motion `TRAVEL` `STOPPED`;
        ShdrConditionFaultIf p+`_alm_heat` data.alarms.overheat;
        ShdrConditionFaultIf p+`_alm_travel` data.alarms.overtravel;
        ShdrConditionFaultIf p+`_alm_servo` data.alarms.servo;
        axis_letter = string.slice observation.marker[1].name 0 1;
        is_index = array.contains [`A`,`B`,`C`] axis_letter;
        if is_index; ShdrEvent p+`_rotary` `INDEX`; end;
      l99.driver.fanuc.veneers.SpindleData, fanuc: >-
        p = device+`_p`+observation.marker[0].number+`_`+observation.marker[1].name;
        ShdrSample p+`_load` data.load;
        ShdrSample p+`_temp` data.temperature;
        ShdrSample p+`_power` data.power;
        ShdrSample p+`_speed` data.speed;
        ShdrEventIf p+`_state` (data.speed > 0) `TRAVEL` `STOPPED`;
        ShdrEvent p+`_rotary` `SPINDLE`;
        ShdrConditionFaultIf p+`_alm_lnk` (! data.status_lnk);
        ShdrConditionSeverity p+`_alm_amp` (data.error > 0) (data.warning > 0) (data.error == 0 && data.warning == 0);
  transport-base-mqtt: &transport-base-mqtt
    transport: l99.driver.fanuc.transports.MQTT, fanuc
  transport-base-influx: &transport-base-influx
    transport: l99.driver.fanuc.transports.InfluxLP, fanuc
  transport-base-shdr: &transport-base-shdr
    transport: l99.driver.fanuc.transports.SHDR, fanuc
#
# user configuration section
#
user:
  # focas sources
  source-1: &source-1
    # example fanuc source
    l99.driver.fanuc.FanucMachine, fanuc:
      sweep_ms: !!int 1000
      net:
        ip: 10.1.10.211
        port: !!int 8193
        timeout_s: !!int 3
  source-2: &source-2
    # example fanuc source
    l99.driver.fanuc.FanucMachine, fanuc:
      sweep_ms: !!int 1000
      net:
        ip: 172.16.13.100
        port: !!int 8193
        timeout_s: !!int 3
  source-3: &source-3
    # example fanuc source
    l99.driver.fanuc.FanucMachine, fanuc:
      sweep_ms: !!int 1000
      net:
        ip: 172.16.13.50
        port: !!int 8193
        timeout_s: !!int 3
  # collectors
  collector-0: &collector-0
    # example collector
    l99.driver.fanuc.strategies.FanucMultiStrategy, fanuc:
      - l99.driver.fanuc.collectors.ParameterDump, fanuc
      - l99.driver.fanuc.collectors.DiagnosisDump, fanuc
      - l99.driver.fanuc.collectors.PmcDump, fanuc
  collector-1: &collector-1
    # example collector
    l99.driver.fanuc.strategies.FanucMultiStrategy, fanuc:
      - l99.driver.fanuc.collectors.MachineInfo, fanuc
      - l99.driver.fanuc.collectors.Alarms, fanuc
      - l99.driver.fanuc.collectors.Messages, fanuc
      - l99.driver.fanuc.collectors.StateData, fanuc
      - l99.driver.fanuc.collectors.ToolData, fanuc
      - l99.driver.fanuc.collectors.ProductionData, fanuc
      - l99.driver.fanuc.collectors.GCodeData, fanuc
      - l99.driver.fanuc.collectors.AxisData, fanuc
      - l99.driver.fanuc.collectors.SpindleData, fanuc
  # targets
  target-mqtt-1: &target-mqtt-1
    # send to tcp mqtt broker
    << : *transport-base-mqtt
    l99.driver.fanuc.transports.MQTT, fanuc:
      << : *default-mqtt-options
      enabled: !!bool true
      net:
        type: tcp
        ip: 10.1.10.210
        port: !!int 1883
      anonymous: !!bool true
      user:
      password:
  target-mqtt-2: &target-mqtt-2
    # send to websocket mqtt broker
    << : *transport-base-mqtt
    l99.driver.fanuc.transports.MQTT, fanuc:
      << : *default-mqtt-options
      enabled: !!bool true
      net:
        type: ws
        ip: test.mosquitto.org
        port: !!int 8080
      anonymous: !!bool true
      user:
      password:
  target-influx-1: &target-influx-1
    # send to cloud influx instance
    <<: *transport-base-influx
    l99.driver.fanuc.transports.InfluxLP, fanuc:
      <<: *default-influx-transformers
      host: "https://region-x.influxdata.com"
      token: "my-token"
      org: "my-org"
      bucket: "my-bucket"
  target-shdr-1: &target-shdr-1
    # open tcp socket for mtconnect agent
    << : *transport-base-shdr
    l99.driver.fanuc.transports.SHDR, fanuc:
      << : *default-shdr-transformers
      << : *default-shdr-model-genny
      device_name: f_sim
      net:
        port: !!int 7878
        heartbeat_ms: !!int 10000
  target-shdr-2: &target-shdr-2
    # open tcp socket for mtconnect agent
    <<: *transport-base-shdr
    l99.driver.fanuc.transports.SHDR, fanuc:
      <<: *default-shdr-transformers
      <<: *default-shdr-model-genny
      device_name: f13_50
      net:
        port: !!int 7978
        heartbeat_ms: !!int 10000
  target-shdr-3: &target-shdr-3
    # open tcp socket for mtconnect agent
    <<: *transport-base-shdr
    l99.driver.fanuc.transports.SHDR, fanuc:
      <<: *default-shdr-transformers
      <<: *default-shdr-model-genny
      device_name: f13_100
      net:
        port: !!int 7979
        heartbeat_ms: !!int 10000
#
# runtime configuration section
#
machines:
  # each machine must have a unique 'id' value
  # each machine must consist of the following references:
  #  base: driver configuration
  #    *machine-base
  #  disabled override: (optional) set machine inactive
  #    *machine-disabled
  #  source: where to get data
  #    -- user defined reference
  #  collector: what data to collect
  #    -- user defined reference
  #  target: where to send data
  #    -- user defined reference
  - id: example-mqtt
    << : *machine-base        # base Fanuc configuration
    << : *machine-disabled    # omit this machine setup from runtime; remove to make active
    << : *source-1            # where to get data
    << : *collector-1         # what data to get and how to transform data
    << : *target-mqtt-1       # where to send data
  - id: example-influx
    << : *machine-base
    << : *machine-disabled
    << : *source-1
    << : *collector-1
    << : *target-influx-1
  - id: f_sim
    <<: *machine-base
    #<<: *machine-disabled
    <<: *source-1
    <<: *collector-1
    <<: *target-shdr-1
  - id: f13_50
    <<: *machine-base
    <<: *machine-disabled
    <<: *source-2
    <<: *collector-1
    <<: *target-shdr-2
  - id: f13_100
    <<: *machine-base
    <<: *machine-disabled
    <<: *source-3
    <<: *collector-1
    <<: *target-shdr-3